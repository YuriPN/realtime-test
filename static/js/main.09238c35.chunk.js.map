{"version":3,"sources":["components/tiny-editor.jsx","main/importFile.jsx","serviceWorker.js","index.js"],"names":["TinyEditor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","content","handleEditorChange","bind","assertThisInitialized","setState","react_default","a","createElement","es2015","selector","value","apiKey","init","external_plugins","wave","docId","username","plugins","contextmenu","toolbar","onChange","Component","mammoth","require","UploadFile","getHtml","e","convertToHtml","arrayBuffer","target","result","optionsToMammoth","then","file","handleFile","files","reader","FileReader","onload","readAsArrayBuffer","handleUser","userName","styleMap","id","type","tiny_editor","Boolean","window","location","hostname","match","ReactDOM","render","importFile","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAyCeA,cArCX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,QAAQ,IAEZR,EAAKS,mBAAqBT,EAAKS,mBAAmBC,KAAxBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KALZA,kFAQCQ,GACfL,KAAKS,SAAS,CAAEJ,6CAIhB,OACIK,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACQC,SAAU,WACVC,MAAQf,KAAKJ,MAAMS,QACnBW,OAAS,mDACTC,KAAM,CACFC,iBAAkB,CAACC,KAAQ,mDAC3BA,KAAM,CACFC,MAAS,OACTC,SAAY,OACZL,OAAU,wCAEdM,QAAS,CACL,iRAEJC,YAAa,2CACbC,QAAS,0LAEjBC,SAAUzB,KAAKM,4BAhCNoB,aCDrBC,EAAUC,EAAQ,IA0DPC,cArDX,SAAAA,EAAYjC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,IACdhC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+B,GAAA1B,KAAAH,KAAMJ,KAiBVkC,QAAU,SAACC,GACPJ,EAAQK,cAAc,CAACC,YAAaF,EAAEG,OAAOC,QAAStC,EAAKuC,kBAClDC,KAAM,SAACF,GACJtC,EAAKY,SAAS,CACV6B,KAAKH,EAAOpB,WAtBdlB,EA2BlB0C,WAAa,SAACR,GACV,IAAIO,EAAOP,EAAEG,OAAOM,MAAM,GACtBC,EAAS,IAAIC,WAEjBD,EAAOE,OAAS9C,EAAKiC,QAErBW,EAAOG,kBAAkBN,IAjCXzC,EAmClBgD,WAAa,SAACxB,GACVxB,EAAKY,SAAS,CACVqC,SAAUzB,KAnCdxB,EAAKO,MAAQ,CACTkC,KAAM,wBACNQ,SAAU,SAGdjD,EAAKuC,iBAAmB,CACpBW,SAAU,CACN,4CACA,iDAIRlD,EAAK0C,WAAa1C,EAAK0C,WAAWhC,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAClBA,EAAKiC,QAAUjC,EAAKiC,QAAQvB,KAAbT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAfDA,wEA0Cd,OACIa,EAAAC,EAAAC,cAAA,OAAKoC,GAAG,WACJtC,EAAAC,EAAAC,cAAA,SAAOqC,KAAK,OAAOD,GAAK,aAAavB,SAAWzB,KAAKuC,aACrD7B,EAAAC,EAAAC,cAACsC,EAAD,CAAY7C,QAASL,KAAKI,MAAMkC,KAAMjB,SAAUrB,KAAKI,MAAM0C,mBA/ClDpB,oBCOLyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAAkBC,SAASC,eAAe,SD0HpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.09238c35.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Editor} from '@tinymce/tinymce-react';\n\nclass TinyEditor extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            content:''\n        }\n        this.handleEditorChange = this.handleEditorChange.bind(this)\n    }\n    \n    handleEditorChange(content){\n        this.setState({ content })\n    }\n\n    render(){\n        return(\n            <Editor \n                    selector= 'textarea'\n                    value={ this.props.content }\n                    apiKey = '11mawuf4s296afp379jcddiaf0t6bb1buhxyipc2xwzfgeb5'\n                    init={{\n                        external_plugins: {\"wave\": \"https://cdn2.codox.io/waveTinymce/plugin.min.js\"},\n                        wave: {\n                            \"docId\": \"doc1\", // unique document id,\n                            \"username\": \"Yuri\", // unique username or email address\n                            \"apiKey\": \"ee85b096-0af6-46b3-b3f5-4886d2e8a081\" // this is your actual API Key\n                        },\n                        plugins: [\n                            'autoresize print preview fullpage searchreplace autolink directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern visualblocks'\n                        ],\n                        contextmenu: \"link image imagetools table spellchecker\",\n                        toolbar: 'spellchecker formatselect | bold italic forecolor | alignleft aligncenter alignright alignjustify  | numlist bullist outdent indent  | removeformat | code | visualblocks | addcomment',\n                    }}\n                onChange={this.handleEditorChange}\n            />\n        );\n    }\n}\n\nexport default TinyEditor;","import React, {Component} from 'react';\nimport TinyEditor from '../components/tiny-editor';\nvar mammoth = require('mammoth');\n\n\nclass UploadFile extends Component{\n    \n    constructor(props){\n        super(props)\n        this.state = {\n            file: \"Insira seu texto aqui\",\n            userName: 'User1'\n        }\n\n        this.optionsToMammoth = {\n            styleMap: [\n                \"p[style-name='Section Title'] => h1:fresh\",\n                \"p[style-name='Subsection Title'] => h2:fresh\"\n            ]\n        }\n\n        this.handleFile = this.handleFile.bind(this)\n        this.getHtml = this.getHtml.bind(this)\n    }\n\n    getHtml = (e) => {\n        mammoth.convertToHtml({arrayBuffer: e.target.result}, this.optionsToMammoth)\n                .then( (result) =>{\n                    this.setState({\n                        file:result.value\n                    });\n                }) \n    }\n    \n    handleFile = (e) =>{\n        var file = e.target.files[0];\n        var reader = new FileReader();\n\n        reader.onload = this.getHtml\n        \n        reader.readAsArrayBuffer(file);\n    }\n    handleUser = (username) =>{\n        this.setState({\n            userName: username\n        });\n    }\n    render(){\n        \n        return(\n            <div id='divMain'>\n                <input type='file' id = \"FileUpload\" onChange={ this.handleFile }></input>\n                <TinyEditor content={this.state.file} username={this.state.userName}/>\n            </div>\n            \n        );\n    }\n    \n}\n\nexport default UploadFile;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport FileUploader from './main/importFile'\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<FileUploader />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}